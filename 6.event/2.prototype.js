/** js是面向对象的语言，只有对象* 原型链* 原型和构造函数生成对象* 1.构造函数内定义的属性继承方式不同。* 2.构造函数的任何属性和函数都会被重复创建。* 3.构造函数内定义的函数运行时有闭包的开销。* */function Person(){    //this.name = '';    //this.say=function(){}}Person.prototype.name='js';Person.prototype.showName=function(){    console.log(this.name);};var p = new Person();p.showName();p.name='js';Person.prototype.name='2';p.__proto__.showName();function Animal (name,food){    this.food = food;    this.name = name;    this.getName=function(){        return this.name;    }}Animal.prototype.food='meet';Animal.prototype.eat=function(){    console.log('I am eating' +this.food);}var tiger = new Animal('tiger');var mouse = new Animal('mouse','rice');console.log(tiger.getName == mouse.getName);console.log(tiger.eat===mouse.eat);console.log(tiger.getName());tiger.eat();/** js特殊对象Object function，构造函数，用于生成对象* Object.prototype他是所有对象的祖先* function.prototype是所有函数的祖先* js对象有三类* 1.用户创建对象 new出来的* 2.构造函数 他有一个prototype指向自己的原型对象* 创建对象时，被创建对象的__proto__会指向函数的prototype属性* 原型对象有一个constructor指向自己的构造函数* 3.原型对象 这三类对象都有__proto__属性，指向该对象的原型，任何都可以遍历到Object.prototype上** */function Dog(){}Object.prototype.name= 'js';Dog.prototype.name='dog';var d= new Object();var dog = new Dog();console.log(d.name);console.log(dog.name);console.log(dog.__proto__.name);console.log(dog.__proto__.__proto__.name);console.log(dog.__proto__.constructor.prototype.name);